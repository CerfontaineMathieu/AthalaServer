

package athalaserver;
import AthalaData.User;
import AthalaPayload.*;
import AthalaThreads.ThreadBeacon;
import AthalaThreads.ThreadRefresh;
import AthalaThreads.ThreadServer;
import AthalaThreads.ThreadTimer;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.DefaultListModel;
public class AthalaGUI extends javax.swing.JFrame implements ConsoleServeur{

    private ThreadBeacon thB;
    private ThreadServer thS;    
    private ThreadTimer thT;
    private ThreadRefresh thR;
    public List<User> UsersList;
    private HashMap<String,Long> cooldowns = new HashMap<String,Long>();    
    private static final String filePathString = System.getProperty("user.dir") + System.getProperty("file.separator")+"UsersList";
    /**
     * Creates new form AthalaGUI
     */
    public AthalaGUI() {
        initComponents();
        
        File f = new File(filePathString);
        if(f.exists() && !f.isDirectory()) { 
            try  
            {
             FileInputStream fis = new FileInputStream(filePathString);
             ObjectInputStream ois = new ObjectInputStream(fis);
             UsersList = (List<User>)ois.readObject();
            } 
            catch (Exception e)
             { Trace("Impossible de désérialiser la liste d'utilisateurs. Vérifier que le fichier existe et réessayer : "+e); }
        }else
        {
            UsersList=new ArrayList<User>();
        }
        Trace("Initialisation du serveur Athala ...");                
        
       
        thB = new ThreadBeacon(this);
        thB.start();
        thS = new ThreadServer(this);
        thS.start();
        thT = new ThreadTimer(this,cooldowns);
        thT.start();        
        thR = new ThreadRefresh(JUsersList,cooldowns);
        thR.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        LogTab = new javax.swing.JTextArea();
        InfoPanel = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        JUsersList = new javax.swing.JList<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setDividerLocation(300);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        LogTab.setEditable(false);
        LogTab.setBackground(new java.awt.Color(0, 0, 0));
        LogTab.setColumns(20);
        LogTab.setForeground(new java.awt.Color(255, 255, 255));
        LogTab.setRows(5);
        LogTab.setText("\n");
        jScrollPane1.setViewportView(LogTab);

        jSplitPane1.setRightComponent(jScrollPane1);

        jScrollPane2.setViewportView(JUsersList);

        jSplitPane2.setLeftComponent(jScrollPane2);

        javax.swing.GroupLayout InfoPanelLayout = new javax.swing.GroupLayout(InfoPanel);
        InfoPanel.setLayout(InfoPanelLayout);
        InfoPanelLayout.setHorizontalGroup(
            InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE)
        );
        InfoPanelLayout.setVerticalGroup(
            InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
        );

        jSplitPane1.setTopComponent(InfoPanel);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AthalaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AthalaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AthalaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AthalaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AthalaGUI().setVisible(true);
            }
        });
    }

    @Override
    public void Trace(String commentaire) {
        LogTab.append(">"+commentaire+"\n");
    }

    @Override
    public void AddClient(User u) {
        cooldowns.put(u.getUsername(), System.currentTimeMillis());
    }

    @Override
    public boolean AuthenticateUser(User u) {        
        for(int i=0; i< UsersList.size();i++)
        {
            User temp = UsersList.get(i);
            if(temp.getUsername().equals(u.getUsername()) && temp.getPassword().equals(u.getPassword()))
            {
                return true;
            }
        }       
        return false;
    }

    @Override
    public void CreateNewUser(User u) {       
        if(!UsersList.contains(u))
        {
            UsersList.add(u);
            try  
            {
              FileOutputStream fos = new FileOutputStream(filePathString);
              ObjectOutputStream oos = new ObjectOutputStream(fos);
              oos.writeObject(UsersList);
              oos.close();
              fos.close();
            } 
            catch (Exception e)
            { Trace("Impossible de désérialiser la liste d'utilisateurs. Vérifier que le fichier existe et réessayer."); }
           
        }
    }
    
    @Override
    public User getUserInfo(String n)
    {
        for(int i=0;i<UsersList.size();i++){
            User u = UsersList.get(i);
            if(u.getUsername().equals(n)){return u;}
        }
        return null;
    }
    
    @Override
    public boolean saveUser(User u)
    {
        String userToSave = u.getUsername();
        for(int i = 0;i<UsersList.size();i++)
        {
            User tmp = UsersList.get(i);
            if(tmp.getUsername().equals(userToSave)){
                UsersList.remove(i);
                UsersList.add(u);
                try  
                {
                  FileOutputStream fos = new FileOutputStream(filePathString);
                  ObjectOutputStream oos = new ObjectOutputStream(fos);
                  oos.writeObject(UsersList);
                  fos.close();
                  oos.close();                                    
                } 
                catch (Exception e)
                { Trace("Impossible de désérialiser la liste d'utilisateurs. Vérifier que le fichier existe et réessayer."); }
                    return true;
            }
        }
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel InfoPanel;
    private javax.swing.JList<String> JUsersList;
    private javax.swing.JTextArea LogTab;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    // End of variables declaration//GEN-END:variables
}
